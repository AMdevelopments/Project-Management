{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adamm\\\\Desktop\\\\Project-Management\\\\client\\\\src\\\\components\\\\Projects\\\\Projects.js\",\n  _s = $RefreshSig$();\n//Projects.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Projects.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Projects = () => {\n  _s();\n  const [projects, setProjects] = useState([]);\n  // Assuming you have a way to get the current user's ID correctly\n  const userId = localStorage.getItem('userId'); // Updated to use localStorage for demonstration\n\n  useEffect(() => {\n    fetchProjects();\n  }, []);\n  const fetchProjects = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/projects');\n      setProjects(response.data.map(project => ({\n        ...project,\n        // Simulating adding 'username' dynamically; in practice, this should come from your API\n        username: project.user_id === parseInt(userId) ? 'Your Username' : 'None'\n      })));\n    } catch (error) {\n      console.error(\"Failed to fetch projects\", error);\n    }\n  };\n  const handleAddProject = async () => {\n    try {\n      await axios.post('http://localhost:5000/api/projects', newProject);\n      fetchProjects(); // Refresh the list to include the new project\n    } catch (error) {\n      console.error(\"Failed to add project\", error);\n    }\n  };\n  const handleAssignToUser = async projectId => {\n    try {\n      // Assuming the backend handles the logic of assigning the project to the user\n      await axios.put(`http://localhost:5000/api/projects/${projectId}/assign`, {\n        userId\n      });\n      fetchProjects(); // Refresh the list to reflect the assignment\n    } catch (error) {\n      console.error(\"Failed to assign project\", error);\n    }\n  };\n  const handleUpdateStatus = async (projectId, newStatus) => {\n    try {\n      await axios.put(`http://localhost:5000/api/projects/${projectId}/status`, {\n        status: newStatus\n      });\n      fetchProjects(); // Refresh the list to reflect the new status\n    } catch (error) {\n      console.error(\"Failed to update project status\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"projects-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Projects\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), projects.map(project => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: project.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: project.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Status: \", project.status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Assigned to: \", project.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAssignToUser(project.id),\n        children: \"Assign to Me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => handleUpdateStatus(project.id, e.target.value),\n        value: project.status,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"open\",\n          children: \"Open\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"in progress\",\n          children: \"In Progress\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"done\",\n          children: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, project.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(Projects, \"TSrpuQX6QU8EgjQSxaAzj2u9i4o=\");\n_c = Projects;\nexport default Projects;\nvar _c;\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Projects","_s","projects","setProjects","userId","localStorage","getItem","fetchProjects","response","get","data","map","project","username","user_id","parseInt","error","console","handleAddProject","post","newProject","handleAssignToUser","projectId","put","handleUpdateStatus","newStatus","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","description","onClick","id","onChange","e","target","value","_c","$RefreshReg$"],"sources":["C:/Users/adamm/Desktop/Project-Management/client/src/components/Projects/Projects.js"],"sourcesContent":["//Projects.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './Projects.scss';\r\n\r\nconst Projects = () => {\r\n  const [projects, setProjects] = useState([]);\r\n  // Assuming you have a way to get the current user's ID correctly\r\n  const userId = localStorage.getItem('userId'); // Updated to use localStorage for demonstration\r\n\r\n  useEffect(() => {\r\n    fetchProjects();\r\n  }, []);\r\n\r\n  const fetchProjects = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:5000/api/projects');\r\n      setProjects(response.data.map(project => ({\r\n        ...project,\r\n        // Simulating adding 'username' dynamically; in practice, this should come from your API\r\n        username: project.user_id === parseInt(userId) ? 'Your Username' : 'None'\r\n      })));\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch projects\", error);\r\n    }\r\n  };\r\n\r\n  const handleAddProject = async () => {\r\n    try {\r\n      await axios.post('http://localhost:5000/api/projects', newProject);\r\n      fetchProjects(); // Refresh the list to include the new project\r\n    } catch (error) {\r\n      console.error(\"Failed to add project\", error);\r\n    }\r\n  };\r\n\r\n  const handleAssignToUser = async (projectId) => {\r\n    try {\r\n      // Assuming the backend handles the logic of assigning the project to the user\r\n      await axios.put(`http://localhost:5000/api/projects/${projectId}/assign`, { userId });\r\n      fetchProjects(); // Refresh the list to reflect the assignment\r\n    } catch (error) {\r\n      console.error(\"Failed to assign project\", error);\r\n    }\r\n  };\r\n\r\n  const handleUpdateStatus = async (projectId, newStatus) => {\r\n    try {\r\n      await axios.put(`http://localhost:5000/api/projects/${projectId}/status`, { status: newStatus });\r\n      fetchProjects(); // Refresh the list to reflect the new status\r\n    } catch (error) {\r\n      console.error(\"Failed to update project status\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"projects-container\">\r\n      <h1>Projects</h1>\r\n      {projects.map((project) => (\r\n        <div key={project.id} className=\"project-item\">\r\n          <h2>{project.title}</h2>\r\n          <p>{project.description}</p>\r\n          <p>Status: {project.status}</p>\r\n          <p>Assigned to: {project.username}</p>\r\n          <button onClick={() => handleAssignToUser(project.id)}>Assign to Me</button>\r\n          <select onChange={(e) => handleUpdateStatus(project.id, e.target.value)} value={project.status}>\r\n            <option value=\"open\">Open</option>\r\n            <option value=\"in progress\">In Progress</option>\r\n            <option value=\"done\">Done</option>\r\n          </select>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Projects;\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}